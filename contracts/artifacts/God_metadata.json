{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "mesage",
						"type": "string"
					}
				],
				"name": "Log",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "bar",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "foo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "diamond inheritance in OOP, diamond inheritance means a class inherit from two or above classes - if you call a same named function using 'super' in diamond inheritance, you will call every function in it's father class God /  \\ Adam Eve \\  / people the sequences is Eve.foo()->Adam.foo()->God.foo()*",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/divingIntoChain.sol": "God"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/divingIntoChain.sol": {
			"keccak256": "0x897c7d6d7fb14b2bc554cf1e44335ed698bb13b036f66d5f3cc208fef098cf95",
			"license": "MIT",
			"urls": [
				"bzz-raw://d85cf0279e645dbce2b744082c8afe8b376e43ce3ec1b3491c42e90f787973ce",
				"dweb:/ipfs/QmPX6tc1sGtbS9ujWT1mpdqY5VHHtEDgScqD6dBXPkHK1c"
			]
		}
	},
	"version": 1
}