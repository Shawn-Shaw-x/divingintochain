{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "Merkle-tree(hash tree) is a tree that built from buttom to top. - every leaf node is the data's hash. - every  non-leaf node is the two son's nodes hash;  top hash( hash0 + hash1 ) /                       \\ hash0(hash0-0 + hash0-1)        hash1(hash1-0 + hash1-1) /               \\              /            \\ hash0-0(hashL1)    hash0-1(hashL2)  hash1-0(hashL3) hash1-1(hashL4) |                   |               |               | L1                  L2              L3              L4 What can merkle-tree do? - merkle tree can do the validation an security check on big data structure which called Merkle Proof. How does it work? - as we see below: In some big data structure system, we aleardy known the top hash. And if we need to validate the data of L1, we need to know the ceil(log2^N),also named Proof. In this case, hash0-1 and hash 1-0 would be the proofs. So, we can calculate the hash of L1 to get hash0-0, and with hash0-1, we can get hash 0, still with the hash 1, we finally know the top hash! It means the data of L1 is secure and valid! top hash( hash0 + hash1 ) /                       \\ hash0(hash0-0 + hash0-1)       <hash1(hash1-0 + hash1-1)> /               \\              /            \\ hash0-0(hashL1)  <hash0-1(hashL2)>  hash1-0(hashL3) hash1-1(hashL4) |                   |               |               | L1                  L2              L3              L4*",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/merkle_tree.sol": "MerkleProof"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/IERC721/ERC721.sol": {
			"keccak256": "0x2c65ed044ea6637b04317c7dcb4998e1d8cfec65c892ba5f3e20ea2009b818f7",
			"license": "MIT",
			"urls": [
				"bzz-raw://ddb0fee94d03a62e1c17d71473197833f9b3ad2a1b52308667b60197d8cbc97d",
				"dweb:/ipfs/QmQuj5zHEZCHpjqTFDJDcvuNzx1oeXsn3SQDVkP26MeAsg"
			]
		},
		"contracts/IERC721/IERC165.sol": {
			"keccak256": "0x8f1405053180e54a54ceef00410704135364bed7d84060e99f623dfb1e93e2dc",
			"license": "MIT",
			"urls": [
				"bzz-raw://1c50d54cfb8f0e89947fc4d92c33f6d52551bc45fb9119a0814b04a0e180eefe",
				"dweb:/ipfs/QmRrjCtAzHybRruHLZRXYGqs5txvvomcHxiftp5PpW6aMy"
			]
		},
		"contracts/IERC721/IERC721.sol": {
			"keccak256": "0x900b080a7ec3eea3ab58a99b77b326de284adefc694720ff2a1970c409add465",
			"license": "MIT",
			"urls": [
				"bzz-raw://fbc2b92ea80e49b70175baa96bbb9100e711b54431f28cdd35a07a84c158f596",
				"dweb:/ipfs/QmcLjH7rYNja6M8dKraCUrL2FapfbfAdGTipDHEp1ZeShN"
			]
		},
		"contracts/IERC721/IERC721Metadata.sol": {
			"keccak256": "0xcf6c01c9aa849597e91f0c2e8263f3124a4cf9883d32568579b1dcc704175bc3",
			"license": "MIT",
			"urls": [
				"bzz-raw://f3abdefaebb80b978349929ccf09fe7e70bb97e6abe6ebdb3aef920af738ca88",
				"dweb:/ipfs/QmbWss9tvkQhe2rhQqRbAXQHLktSC6SJHiJynnswH9vLNh"
			]
		},
		"contracts/IERC721/IERC721Receiver.sol": {
			"keccak256": "0x8d773ce8a111a5eacca6113339e0677b6723ece54b17ed4386844abc230e51a5",
			"license": "MIT",
			"urls": [
				"bzz-raw://9aceaabbd3be854a568fe85c2bac2c03c8d950def4433cce2e2a5687b0165be5",
				"dweb:/ipfs/QmR7pNX9UGbVFZp7w11RXWNcSi67uqMR7vCYeStHceyFaj"
			]
		},
		"contracts/IERC721/String.sol": {
			"keccak256": "0x660e02ca4f221fef9e504dcbbb436559e16d85be6a5c570d870d700f3df4d0cf",
			"license": "MIT",
			"urls": [
				"bzz-raw://f22a0497813d3e29e534e5c2ce309f1cf65056eca3313a920bab0309bb50cfe1",
				"dweb:/ipfs/QmXDMWNMWw4P8xzS29LR3anbGxLXiZfKi4JLaSgU6mdytr"
			]
		},
		"contracts/merkle_tree.sol": {
			"keccak256": "0xf5cac95a5f166655b9307d228f6907d48a373fe7ebb868a69527455e96195ed7",
			"license": "MIT",
			"urls": [
				"bzz-raw://5c7f53de9b694a83c84c00900e2765e07054e1d223521f50e6f4c858efe85b0e",
				"dweb:/ipfs/QmdrbbTJuFjE8zNpzYjJiZkyZsTN1GoYcyWAsxb5ET9SGB"
			]
		}
	},
	"version": 1
}