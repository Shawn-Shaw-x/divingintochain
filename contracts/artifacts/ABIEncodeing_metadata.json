{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "decode",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "dx",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "daddr",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "dname",
						"type": "string"
					},
					{
						"internalType": "uint256[2]",
						"name": "darray",
						"type": "uint256[2]"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "encode",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "result",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "encodePacked",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "result",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "encodeWithSelector",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "result",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "encodeWithSignature",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "result",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "ABI encoding ABI is a standard that belongs to Etherium's smart contrat. 1. abi.encode(): encode to 32bytes data 2. abi.encodePacked(): save space 3. abi.encodeWithSignature(): used to call the other contract's function 4. abi.encodeWithSelector(): used to call the other contract's function sceneriao: 1. call low level contract's function. 2. import and  call the ether.js  3. call the contract that is not open-source. abi.encodeWithSelector(bytes4(0x533ba33a));*",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/divingIntoChain.sol": "ABIEncodeing"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/divingIntoChain.sol": {
			"keccak256": "0x897c7d6d7fb14b2bc554cf1e44335ed698bb13b036f66d5f3cc208fef098cf95",
			"license": "MIT",
			"urls": [
				"bzz-raw://d85cf0279e645dbce2b744082c8afe8b376e43ce3ec1b3491c42e90f787973ce",
				"dweb:/ipfs/QmPX6tc1sGtbS9ujWT1mpdqY5VHHtEDgScqD6dBXPkHK1c"
			]
		}
	},
	"version": 1
}